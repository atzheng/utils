#!/usr/bin/env ipython
import requests
import subprocess

import click
import funcy
from scholarly import scholarly


DEFAULT_PDF_DIR = "~/Dropbox (MIT)/papers"


def write_to_clipboard(output):
    process = subprocess.Popen(
        'pbcopy', env={'LANG': 'en_US.UTF-8'}, stdin=subprocess.PIPE)
    process.communicate(output.encode('utf-8'))


def format_result(x):
    return "{title} ({authors})".format(title=x.bib["title"],
                                        authors=",".join(x.bib["author"]))


def format_results(results):
    return "\n" + "\n".join(
        "\t{i}. {str}".format(i=i, str=format_result(x))
        for i, x in enumerate(results)) + "\n"


@click.command()
@click.argument("query")
def main(query):
    results = scholarly.search_pubs(query)
    top_results = funcy.take(10, results)

    if len(top_results) == 0:
        print("No results found.")
        return None
    elif len(top_results) == 1:
        result = top_results[0]
    else:
        print(format_results(top_results))
        idx = click.prompt("Choose an entry:", default=0)
        result = top_results[idx]

    bib = result.bibtex
    print(bib)
    write_to_clipboard(bib)

    # eprint = result.bib.get("eprint", None)
    #  if eprint and click.confirm("Download pdf? y/n") == "y":
    #     dir = click.prompt("Directory to save in:", default=DEFAULT_PDF_DIR)
    #     response = requests.get(eprint)
    #     fname = format_result(result) + ".pdf"
    #     with open(fname, 'wb') as f:
    #         f.write(response.content)


if __name__ == "__main__":
    main()
